/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/hadiths/search": {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search hadiths */
        get: {
            parameters: {
                query: {
                    token: string;
                    query: string;
                    /** @description The type of the required results */
                    search_type?: "any" | "semantic" | "classical";
                    /** @description Array of book IDs to be used as filters in the search */
                    "hadith_books[]"?: number[];
                    /** @description Array of source IDs to be used as filters in the search */
                    "sources[]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Perform hadiths search */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            classical_search_results?: components["schemas"]["hadith"][];
                            semantic_search_results?: components["schemas"]["hadith"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hadiths/search/filters": {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get hadiths search filters */
        get: {
            parameters: {
                query: {
                    token: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get hadiths search filters */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Array of book IDs and names to be used as filters in the search endpoint */
                            books: {
                                id: number;
                                name: string;
                            }[];
                            /** @description Array of source IDs and names to be used as filters in the search endpoint */
                            sources: {
                                id: string;
                                name: string;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/medium": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get medium */
        get: {
            parameters: {
                query: {
                    /** @description Medium reference ID such as a YouTube video URL */
                    reference_id: string;
                    /** @description The type of the passed <code>reference_id</code> */
                    reference_type: "baheth_id" | "baheth_slug" | "youtube_link";
                    /** @description What resources to expand in the response */
                    "expand[]"?: ("cues" | "playlist" | "speakers")[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Medium found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["medium_with_required_fields"] & {
                            cues?: components["schemas"]["cue"][];
                            playlist: components["schemas"]["playlist"];
                            speakers: components["schemas"]["speaker"][];
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Medium not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/playlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get playlist */
        get: {
            parameters: {
                query: {
                    /** @description Playlist reference ID such as a YouTube playlist URL */
                    reference_id: string;
                    /** @description The type of the passed <code>reference_id</code> */
                    reference_type: "baheth_id" | "baheth_slug" | "youtube_link";
                    /** @description What resources to expand in the response */
                    "expand[]"?: ("media" | "speakers")[];
                    /** @description Page number to be returned */
                    page?: number;
                    /** @description Number of records to be returned per page */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Playlist found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["playlist_with_required_fields"] & {
                            pagination: components["schemas"]["pagination"];
                            media: components["schemas"]["medium"][];
                            speakers: components["schemas"]["speaker"][];
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Playlist not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shamela/search": {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search in Shamela */
        get: {
            parameters: {
                query: {
                    token: string;
                    query: string;
                    /** @description Array of book IDs to be used as filters in the search */
                    "shamela_books[]"?: number[];
                    /** @description Array of author IDs to be used as filters in the search */
                    "shamela_authors[]"?: number[];
                    /** @description Array of category IDs to be used as filters in the search */
                    "shamela_categories[]"?: number[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Perform Shamela search */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            semantic_search_results?: components["schemas"]["shamela_page"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shamela/search/filters": {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Shamela search filters */
        get: {
            parameters: {
                query: {
                    token: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get Shamela search filters */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Array of book IDs and names to be used as filters in the search endpoint */
                            books: {
                                id: number;
                                name: string;
                            }[];
                            /** @description Array of author IDs and names to be used as filters in the search endpoint */
                            authors: {
                                id: number;
                                name: string;
                            }[];
                            /** @description Array of category IDs and names to be used as filters in the search endpoint */
                            categories: {
                                id: number;
                                name: string;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/speakers": {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List/Search speakers */
        get: {
            parameters: {
                query: {
                    token: string;
                    /** @description Page number to be returned */
                    page?: number;
                    /** @description Number of records to be returned per page */
                    limit?: number;
                    /** @description Search query to be used to search speaker names and descriptions */
                    query?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lists/Search speakers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            pagination: components["schemas"]["pagination"];
                            speakers: components["schemas"]["speaker_with_required_fields"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transcriptions/search": {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search transcriptions */
        get: {
            parameters: {
                query: {
                    token: string;
                    query: string;
                    /** @description Array of speaker IDs to be used as filters in the search */
                    "speakers[]"?: number[];
                    /** @description Array of playlist IDs to be used as filters in the search */
                    "playlists[]"?: number[];
                    /** @description Array of medium IDs to be used as filters in the search */
                    "media[]"?: number[];
                    /** @description Array of tag IDs to be used as filters in the search */
                    "tags[]"?: number[];
                    /** @description What resources to expand in the response */
                    "expand[]"?: ("medium" | "playlist" | "speakers")[];
                    /** @description Page number to be returned */
                    page?: number;
                    /** @description Number of records to be returned per page */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Perform transcriptions search */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            pagination: components["schemas"]["pagination"];
                            results: {
                                cue?: components["schemas"]["cue"];
                                medium?: components["schemas"]["medium"];
                                playlist?: components["schemas"]["playlist"];
                                speakers?: components["schemas"]["speaker"][];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transcriptions/search/filters": {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transcriptions search filters */
        get: {
            parameters: {
                query: {
                    token: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get transcriptions search filters */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Array of speaker IDs and names to be used as filters in the <code>search</code> endpoint */
                            speakers: {
                                id: number;
                                name: string;
                            }[];
                            /** @description Array of tag IDs and names to be used as filters in the <code>search</code> endpoint */
                            tags: {
                                id: number;
                                name: string;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        speaker: {
            id?: number;
            slug?: string;
            name?: string;
            description?: string;
            /** @description Speaker link in Baheth */
            link?: string;
            /** @description Speaker image */
            image?: string;
            playlists_count?: number;
            /** @description Speaker link in source (e.g. YouTube) */
            source_link?: string;
            /** @description Baheth's API link to the speaker */
            url: string;
        };
        speaker_with_required_fields: WithRequired<components["schemas"]["speaker"], "id" | "slug" | "name" | "description" | "link" | "image" | "playlists_count" | "source_link" | "url">;
        playlist: {
            id?: number;
            slug?: string;
            title?: string;
            description?: string;
            /** @description Playlist link in Baheth */
            link?: string;
            /** @description Playlist link in source (e.g. YouTube) */
            source_link?: string;
            media_count?: number;
            /** @description Baheth's API link to the playlist */
            url: string;
        };
        playlist_with_required_fields: WithRequired<components["schemas"]["playlist"], "id" | "slug" | "title" | "description" | "link" | "source_link" | "media_count" | "url">;
        medium: {
            id?: number;
            slug?: string;
            title?: string;
            description?: string;
            duration?: number;
            /** @description Medium link in Baheth */
            link?: string;
            /** @description Medium link in source (e.g. YouTube) */
            source_link?: string;
            transcription_txt_link?: string;
            transcription_srt_link?: string;
            transcription_pdf_link?: string;
            transcription_epub_link?: string;
            /** @description Baheth's API link to the medium */
            url: string;
        };
        medium_with_required_fields: WithRequired<components["schemas"]["medium"], "id" | "slug" | "title" | "description" | "duration" | "link" | "source_link" | "transcription_txt_link" | "transcription_srt_link" | "transcription_pdf_link" | "transcription_epub_link" | "url">;
        cue: {
            content: string;
            start_time: number;
            end_time: number;
        };
        pagination: {
            /** @description Total number of records */
            count: number;
            page: number;
            limit: number;
            total_pages: number;
            /** @description Next page number, not present if no next page */
            next_page?: number;
            /** @description Baheth's API link to the next page */
            next_page_link?: string;
            /** @description Previous page number, not present if no previous page */
            previous_page?: number;
            /** @description Baheth's API link to the previous page */
            previous_page_link?: string;
        };
        hadith: {
            isnad: string;
            matn: string;
            grade: string;
            breadcrumb: string;
            link: string;
            book: {
                title: string;
            };
            source: {
                id: string;
                name: string;
                link: string;
            };
        };
        shamela_page: {
            preview: string;
            page: number;
            volume?: number | null;
            link: string;
            shamela_link: string;
            book: {
                title: string;
                shamela_link: string;
            };
            authors: {
                name: string;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
export type operations = Record<string, never>;
